package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/yourusername/zerogallery"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	baseURL := "http://localhost:5000"
	accessToken := "your-access-token"

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
	client := zerogallery.NewClient(baseURL, accessToken)

	// –ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTP –∫–ª–∏–µ–Ω—Ç–æ–º
	// httpClient := &http.Client{
	//     Timeout: 60 * time.Second,
	// }
	// client.SetHTTPClient(httpClient)

	fmt.Println("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ZeroGallery API...")

	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
	version, err := client.GetVersion()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: %v", err)
	}
	fmt.Printf("‚úÖ –í–µ—Ä—Å–∏—è API: %s\n", version)

	// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤
	fmt.Println("\nüìÅ –°–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤:")
	albums, err := client.GetAlbums()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤: %v", err)
	} else {
		for _, album := range albums {
			protected := "üîì"
			if album.IsProtected {
				protected = "üîí"
			}
			fmt.Printf("  %s %s (ID: %d)\n", protected, album.Name, album.ID)
		}
	}

	// 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞
	fmt.Println("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞...")
	newAlbum, err := client.CreateAlbum(zerogallery.CreateAlbumInfo{
		Name:            "Test Album from Go",
		Description:     "–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª—å–±–æ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Go API",
		Token:           "secret-token",
		AllowRemoveData: true,
	})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: %v", err)
	}
	fmt.Printf("‚úÖ –ê–ª—å–±–æ–º —Å–æ–∑–¥–∞–Ω: %s (ID: %d)\n", newAlbum.Name, newAlbum.ID)

	// 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
	fmt.Println("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
	testFile := "test_file.txt"
	err = os.WriteFile(testFile, []byte("Test content from Go client"), 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(testFile)

	// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	fileID, err := client.UploadFile(testFile, newAlbum.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
	} else {
		fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª %s (ID: %d)\n", testFile, fileID)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
	testFiles := []string{"test1.txt", "test2.txt", "test3.txt"}
	for i, fname := range testFiles {
		content := fmt.Sprintf("Test file %d content", i+1)
		os.WriteFile(fname, []byte(content), 0644)
		defer os.Remove(fname)
	}

	fileIDs, err := client.UploadMultipleFiles(testFiles, newAlbum.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: %v", err)
	} else {
		fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤\n", len(fileIDs))
	}

	// 5. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞–ª—å–±–æ–º–∞
	fmt.Println("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ª—å–±–æ–º–∞:")
	albumData, err := client.GetAlbumData(newAlbum.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–∞: %v", err)
	} else {
		for _, item := range albumData {
			fmt.Printf("  üìÑ %s (%s) - %s\n", item.Name, item.FormatSize(), item.MimeType)
			fmt.Printf("     –°–æ–∑–¥–∞–Ω: %s\n", item.GetCreatedTime().Format("2006-01-02 15:04:05"))
		}
	}

	// 6. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
	if len(albumData) > 0 {
		fmt.Println("\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
		downloadItem := albumData[0]

		progressFunc := func(current, total int64) {
			if total > 0 {
				percent := float64(current) / float64(total) * 100
				fmt.Printf("\r  –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%% [%d/%d bytes]", percent, current, total)
			}
		}

		outputPath := fmt.Sprintf("downloaded_%s", downloadItem.Name)
		err = client.DownloadData(downloadItem.ID, outputPath, progressFunc)
		if err != nil {
			log.Printf("\n–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
		} else {
			fmt.Printf("\n‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s\n", outputPath)
			defer os.Remove(outputPath)
		}

		// 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
		if downloadItem.MimeType[:5] == "image" {
			previewPath := fmt.Sprintf("preview_%s", downloadItem.Name)
			err = client.SavePreview(downloadItem.ID, previewPath)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: %v", err)
			} else {
				fmt.Printf("‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s\n", previewPath)
				defer os.Remove(previewPath)
			}
		}
	}

	// 8. –†–∞–±–æ—Ç–∞ —Å –≤–∏–¥–µ–æ (Range requests)
	fmt.Println("\nüé• –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ (Range requests)...")
	// –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	videoData := make([]byte, 10*1024*1024) // 10 MB
	for i := range videoData {
		videoData[i] = byte(i % 256)
	}
	
	videoID, err := client.UploadFileReader(
		bytes.NewReader(videoData),
		"test_video.mp4",
		newAlbum.ID,
	)
	if err == nil {
		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –º–µ–≥–∞–±–∞–π—Ç –≤–∏–¥–µ–æ
		rangeStart := int64(0)
		rangeEnd := int64(1024 * 1024)
		
		stream, headers, err := client.GetVideoStream(videoID, &zerogallery.VideoStreamOptions{
			RangeStart: &rangeStart,
			RangeEnd:   &rangeEnd,
		})
		
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞: %v", err)
		} else {
			defer stream.Close()
			
			// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
			data := make([]byte, 1024*1024)
			n, _ := stream.Read(data)
			
			fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–∏–¥–µ–æ: %d –±–∞–π—Ç\n", n)
			fmt.Printf("   Content-Range: %s\n", headers["Content-Range"])
			fmt.Printf("   Content-Type: %s\n", headers["Content-Type"])
		}
	}

	// 9. –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
	fmt.Println("\nüîç –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
	
	// –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–ª—å–±–æ–º—É
	_, err = client.GetAlbumData(999999)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: %v\n", err)
	}

	// 10. –û—á–∏—Å—Ç–∫–∞
	fmt.Println("\nüßπ –û—á–∏—Å—Ç–∫–∞...")
	fmt.Print("–£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ")
	
	var cleanup string
	fmt.Scanln(&cleanup)
	
	if cleanup == "y" || cleanup == "Y" {
		// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
		for _, item := range albumData {
			err := client.DeleteData(item.ID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", item.Name, err)
			} else {
				fmt.Printf("  ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: %s\n", item.Name)
			}
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞
		err = client.DeleteAlbum(newAlbum.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞: %v", err)
		} else {
			fmt.Printf("  ‚úÖ –£–¥–∞–ª–µ–Ω –∞–ª—å–±–æ–º: %s\n", newAlbum.Name)
		}
	}

	fmt.Println("\n‚ú® –ì–æ—Ç–æ–≤–æ!")
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
func uploadLargeFile(client *zerogallery.Client, filePath string, albumID int64) error {
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	stat, err := file.Stat()
	if err != nil {
		return err
	}

	fmt.Printf("–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: %s (%d MB)\n", 
		filepath.Base(filePath), 
		stat.Size()/(1024*1024))

	start := time.Now()
	fileID, err := client.UploadFileReader(file, filepath.Base(filePath), albumID)
	if err != nil {
		return err
	}

	elapsed := time.Since(start)
	speed := float64(stat.Size()) / elapsed.Seconds() / (1024 * 1024)
	
	fmt.Printf("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ %v (%.2f MB/s), ID: %d\n", elapsed, speed, fileID)
	return nil
}

// –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
func uploadFilesParallel(client *zerogallery.Client, filePaths []string, albumID int64) error {
	type result struct {
		path string
		id   int64
		err  error
	}

	results := make(chan result, len(filePaths))

	for _, path := range filePaths {
		go func(p string) {
			id, err := client.UploadFile(p, albumID)
			results <- result{path: p, id: id, err: err}
		}(path)
	}

	for i := 0; i < len(filePaths); i++ {
		res := <-results
		if res.err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ %s: %v\n", res.path, res.err)
		} else {
			fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω %s (ID: %d)\n", res.path, res.id)
		}
	}

	return nil
}

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
func printDetailedInfo(data *zerogallery.DataInfo) {
	fmt.Printf("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n")
	fmt.Printf("  ID:          %d\n", data.ID)
	fmt.Printf("  –ò–º—è:         %s\n", data.Name)
	fmt.Printf("  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:  %s\n", data.Extension)
	fmt.Printf("  –†–∞–∑–º–µ—Ä:      %s (%d bytes)\n", data.FormatSize(), data.Size)
	fmt.Printf("  MIME —Ç–∏–ø:    %s\n", data.MimeType)
	fmt.Printf("  –ê–ª—å–±–æ–º ID:   %d\n", data.AlbumID)
	fmt.Printf("  –°–æ–∑–¥–∞–Ω:      %s\n", data.GetCreatedTime().Format(time.RFC3339))
	
	if data.Description != "" {
		fmt.Printf("  –û–ø–∏—Å–∞–Ω–∏–µ:    %s\n", data.Description)
	}
	
	if data.Tags != "" {
		fmt.Printf("  –¢–µ–≥–∏:        %s\n", data.Tags)
	}
}